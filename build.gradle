plugins {
    id 'kotlin2js' version '1.3.30'
    id 'kotlinx-serialization' version '1.3.30'
    id "com.moowork.node" version "1.2.0"
    id "org.kravemir.gradle.sass" version "1.2.2"
}

group = 'de.framed-io.kotlin'
version = '1.0.0'

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-js:1.3.30"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:0.11.0"
    implementation "de.westermann:KObserve-js:0.9.1"
}

compileKotlin2Js {
    kotlinOptions.moduleKind = "umd"
    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"

    //kotlinOptions.freeCompilerArgs += "-Xuse-experimental=kotlin.Experimental"
    //kotlinOptions.freeCompilerArgs += "-Xuse-experimental=kotlin.contracts.ExperimentalContracts"
    //kotlinOptions.freeCompilerArgs += "-Xuse-experimental=kotlinx.serialization.ImplicitReflectionSerializer"
}

sass {
    main {
        srcDir = file("$projectDir/src/main/resources/public/stylesheets")
        outDir = file("$buildDir/resources/main/public/stylesheets")

        exclude = "**/*.css"
    }
}

task assembleWeb(type: Sync) {
    from compileKotlin2Js.destinationDir
    from kotlin.sourceSets.main.resources.srcDirs
    from kotlin.target.compilations.main.output
    kotlin.target.compilations.main.runtimeDependencyFiles.each {
        if (it.exists() && !it.isDirectory()) {
            from zipTree(it.absolutePath).matching {
                include '*.js'
                include '*.js.map'
                exclude '*.meta.js'
            }
        }
    }
    into "${projectDir}/web/website"

    doLast {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'show', '--summary', '--no-color'
            standardOutput = stdout
        }
        def lines = stdout.toString().trim().split("\n")

        stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'status', '--short'
            standardOutput = stdout
        }
        def dirty = ""
        if (!stdout.toString().trim().isEmpty()) {
            dirty = " - dirty"
        }

        def result = []

        result += lines[0].substring(lines[0].indexOf(' '), lines[0].indexOf(' ') + 12).trim() + dirty
        result += lines[2].substring(lines[2].indexOf(' ')).trim()
        result += lines.drop(3).findAll {
            !it.trim().isEmpty()
        }.collect {
            it.trim()
        }

        file("${projectDir}/web/website/version").text = result.join("\n")
    }

    dependsOn classes, sass
}

assemble.dependsOn assembleWeb

task run(type: NodeTask) {
    dependsOn build
    dependsOn npmInstall
    script = file("web/index.js")
}

node {
    download = true
    workDir = file("${project.projectDir}/build/node")
    npmWorkDir = file("${project.projectDir}/web")
    nodeModulesDir = file("${project.projectDir}/web")
}

clean.doFirst() {
    delete "web/website"
    delete "web/node_modules"
    delete "out"
}
