group = 'de.framed-io.kotlin'
version = '1.0.0'

version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.2.71'
    ext.serialization_version = '0.6.2'
    ext.web_path = 'web'

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlinx:kotlinx-gradle-serialization-plugin:$serialization_version"
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}

apply plugin: "kotlin2js"
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.moowork.node'

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
}


clean.doFirst() {
    delete("${ web_path}/website")
    delete("${ web_path}/node_modules")
    delete("${ web_path}/package-lock.json")
    delete("out")
}

/*
compileKotlin2Js {
    //kotlinOptions.moduleKind = "amd"
    kotlinOptions.sourceMap = true
}
*/

jar {
    includeEmptyDirs = false

    from {
        configurations.compile.collect {
            if (it.exists()) {
                ((it.isDirectory() || !it.exists()) ? it : zipTree(it)).getFiles().findAll {
                    it.name ==~ "^[a-z|-]+.js(.map)?\$"
                }
            } else {
                ArrayList
            }
        }
    }

    exclude "**/*.kjsm", "**/META-INF/*", "META-INF/*", "**/*meta*"
    into "website"
}

build.doLast() {
    copy {
        File artifact = new File("build/libs/${project.name}-${project.version}.jar")
        includeEmptyDirs = false

        from zipTree(artifact)
        into "${ web_path}"
        include { fileTreeElement ->
            def path = fileTreeElement.path
            !path.contains("META-INF") && !path.endsWith("sass")
        }
    }
}

task run(type: NodeTask) {
    dependsOn build
    dependsOn npmInstall
    script = file("${ web_path}/index.js")
}

node {
    workDir = file("${project.buildDir}/${ web_path}")
    npmWorkDir = file("${project.buildDir}/${ web_path}")
    nodeModulesDir = file("${project.projectDir}/${ web_path}/node_modules")
}
